#include<iostream>
using namespace std;
void buildTree(int a[],int tree[],int start,int end,int treeNode){

    int mid=(start+end)/2;
    if(start==end){
        tree[treeNode]=a[start];
        return;
    }
    buildTree(a,tree,start,mid,2*treeNode);
    buildTree(a,tree,mid+1,end,2*treeNode + 1);
    tree[treeNode] = tree[2*treeNode] + tree[2*treeNode +1];
}
void updateTree(int a[],int tree[],int start,int end,int index,int val,int treeNode){


    if(start==end){
        a[index]=val;
        tree[treeNode]=val;
        return;
    }
    int mid=(start+end)/2;
    if(index>mid){
        updateTree(a,tree,mid+1,end,index,val,2*treeNode +1);
    }
    else{
        updateTree(a,tree,start,mid,index,val,2*treeNode);
    }
    tree[treeNode] = tree[2*treeNode] + tree[2*treeNode + 1];
//    cout<<"---------------\n";
//    for(int i=1;i<10;i++){
//        cout<<tree[i]<<"  ";
//    }
//    cout<<">>>>>>"<<"   "<<start<<"    "<<end<<"    "<<index<<"  "<<val<<"  "<<treeNode;
//    cout<<"\n---------------";

}
int query(int *tree,int left,int right,int start,int end,int treeNode){

    if(start>right || end<left){
        return (0);
    }
    if(left<=start && right>=end){
        return tree[treeNode];
    }
    int mid=(start+end)/2;
    return query(tree,left,right,start,mid,2*treeNode) + query(tree,left,right,mid+1,end,2*treeNode + 1);

}
int main(){
    int a[]={1,2,3,4,5};
    int n=sizeof(a)/sizeof(int);
    int tree[2*n];
    buildTree(a,tree,0,n-1,1);
    int x,y;
    cin>>x>>y;
    cout<<"---------------\n";
    for(int i=1;i<2*n;i++){
        cout<<tree[i]<<"  ";
    }
    cout<<"\n---------------";

    cout<<endl;
    cout<<"\t"<<query(tree,x,y,0,n-1,1);


    return 0;
}
